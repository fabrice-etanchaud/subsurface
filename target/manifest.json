{"nodes": {"model.subsurface.d_crop_types": {"raw_sql": "select\n  crop_code\n  ,crop_label\nfrom\n  {{ ref('crop_types') }}\n\nunion all\n\nselect\n  'N/A'\n  ,'N/A'", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "marts", "d_crop_types"], "unique_id": "model.subsurface.d_crop_types", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "marts/d_crop_types.sql", "original_file_path": "models/marts/d_crop_types.sql", "name": "d_crop_types", "resource_type": "model", "alias": "d_crop_types", "checksum": {"name": "sha256", "checksum": "53a9062c52f2aa6095993d0a9925fa2ea9f2d15651a973f92d56d22c63b0e315"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["crop_types"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.subsurface.crop_types"]}, "description": "land value at transaction time", "columns": {"crop_code": {"name": "crop_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/schema.yml", "build_path": null, "deferred": false}, "model.subsurface.d_municipalities": {"raw_sql": "select\n  municipality_code\n  ,municipality_label\n  ,department_code\n  ,department_label\n  ,region_code\n  ,region_label\nfrom\n  {{ ref('stg__municipalities') }}\n\nunion all\n\nselect\n  'N/A'\n  ,'N/A'\n  ,'N/A'\n  ,'N/A'\n  ,'N/A'\n  ,'N/A'", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "marts", "d_municipalities"], "unique_id": "model.subsurface.d_municipalities", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "marts/d_municipalities.sql", "original_file_path": "models/marts/d_municipalities.sql", "name": "d_municipalities", "resource_type": "model", "alias": "d_municipalities", "checksum": {"name": "sha256", "checksum": "ed1d87fc91f2263321bdde597caa8fd9bdc18de8ab045cf394a960526a82cc3b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "hierarchical geographic dimension", "columns": {"municipality_code": {"name": "municipality_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/schema.yml", "build_path": null, "deferred": false}, "model.subsurface.d_premises_types": {"raw_sql": "select\n  premises_code\n  ,premises_label_en as premises_label\nfrom\n  {{ ref('premises_types') }}\n\nunion all\n\nselect\n  'N/A'\n  ,'N/A'", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "marts", "d_premises_types"], "unique_id": "model.subsurface.d_premises_types", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "marts/d_premises_types.sql", "original_file_path": "models/marts/d_premises_types.sql", "name": "d_premises_types", "resource_type": "model", "alias": "d_premises_types", "checksum": {"name": "sha256", "checksum": "55bbe47a9febead545427c14159bd2f12c66ee55c7f03da191794ab24ff1a013"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["premises_types"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.subsurface.premises_types"]}, "description": "type of premises", "columns": {"premises_code": {"name": "premises_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/schema.yml", "build_path": null, "deferred": false}, "model.subsurface.f_land_values": {"raw_sql": "select\n  transaction_date\n  ,coalesce(transaction_amount, 0) as transaction_amount\n  ,transfer_types.transfer_label_en as transfer_label\n  ,coalesce(lane_type, 'N/A') as lane_type\n  ,coalesce(lane_code, 'N/A') as lane_code\n  ,coalesce(lane, 'N/A') as lane\n  ,coalesce(zip_code, 'N/A') as zip_code\n  ,municipality_code\n  ,lots_count\n  ,coalesce(premises_code, 'N/A') as premises_code\n  ,coalesce(built_surface, 0) as built_surface\n  ,coalesce(land_surface, 0) as land_surface\n  ,coalesce(main_rooms_count, 0) as main_rooms_count\n  ,coalesce(crop_code, 'N/A') as crop_code\nfrom\n  {{ ref('stg__land_values') }} as stg__land_values\n  join {{ ref('transfer_types') }} transfer_types on transfer_types.transfer_label_fr = stg__land_values.transfer_label_fr", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "marts", "f_land_values"], "unique_id": "model.subsurface.f_land_values", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "marts/f_land_values.sql", "original_file_path": "models/marts/f_land_values.sql", "name": "f_land_values", "resource_type": "model", "alias": "f_land_values", "checksum": {"name": "sha256", "checksum": "f99cb619d828f59ecfe70bf27c4d200ef26042e930a0c3d3d1e6af3431e0e31a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg__land_values"], ["transfer_types"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.subsurface.stg__land_values", "seed.subsurface.transfer_types"]}, "description": "land value at transaction time", "columns": {"transaction_date": {"name": "transaction_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_amount": {"name": "transaction_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_label": {"name": "transfer_label", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lane_type": {"name": "lane_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lane_code": {"name": "lane_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lane": {"name": "lane", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "municipality_code": {"name": "municipality_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lots_count": {"name": "lots_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premises_code": {"name": "premises_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "built_surface": {"name": "built_surface", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "land_surface": {"name": "land_surface", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "main_rooms_count": {"name": "main_rooms_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crop_code": {"name": "crop_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/marts/schema.yml", "build_path": null, "deferred": false}, "model.subsurface.stg__land_values": {"raw_sql": "select\n  cast(regexp_replace(nullif(\"Date mutation\", ''), '([0-9]{2})/([0-9]{2})/([0-9]{4})', '$3-$2-$1') as date) as transaction_date\n  ,cast(replace(nullif(\"Valeur fonciere\", ''), ',', '.') as decimal) as transaction_amount\n  ,nullif(\"Nature mutation\", '') as transfer_label_fr\n  ,nullif(\"type de voie\", '') as lane_type\n  ,lpad(nullif(\"Code voie\", ''), 4, '0') as lane_code\n  ,nullif(\"Voie\", '') as lane\n  ,lpad(nullif(\"Code postal\", ''), 5, '0') as zip_code\n  ,case when \"Code departement\" not like '97%'\n    then lpad(nullif(\"Code departement\", ''), 2, '0') || lpad(nullif(\"Code commune\", ''), 3, '0')\n    else lpad(nullif(\"Code departement\", ''), 3, '0') || lpad(nullif(\"Code commune\", ''), 2, '0')\n  end as municipality_code\n  ,cast(nullif(\"Nombre de lots\", '') as decimal) as lots_count\n  ,nullif(\"code type local\", '') as premises_code\n  ,cast(nullif(\"Surface reelle bati\", '') as decimal) as built_surface\n  ,cast(nullif(\"Surface terrain\", '') as decimal) as land_surface\n  ,cast(nullif(\"Nombre pieces principales\", '') as decimal) as main_rooms_count\n  ,nullif(\"Nature culture\", '') as crop_code\nfrom\n  {{ source('land_values', 'valeurs_foncieres') }}", "database": "subsurface_space", "schema": "stage", "fqn": ["subsurface", "staging", "stg__land_values"], "unique_id": "model.subsurface.stg__land_values", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "staging/stg__land_values.sql", "original_file_path": "models/staging/stg__land_values.sql", "name": "stg__land_values", "resource_type": "model", "alias": "stg__land_values", "checksum": {"name": "sha256", "checksum": "555b4faf0b8f88f60605fe9011a839275b4355067aced56885ad38ed24e5a32a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stage", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["land_values", "valeurs_foncieres"]], "depends_on": {"macros": [], "nodes": ["source.subsurface.land_values.valeurs_foncieres"]}, "description": "land value at transaction time", "columns": {"transaction_date": {"name": "transaction_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_amount": {"name": "transaction_amount", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_label_fr": {"name": "transfer_label_fr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lane_type": {"name": "lane_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lane_code": {"name": "lane_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lane": {"name": "lane", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "municipality_code": {"name": "municipality_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lots_count": {"name": "lots_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premises_code": {"name": "premises_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "built_surface": {"name": "built_surface", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "land_surface": {"name": "land_surface", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "main_rooms_count": {"name": "main_rooms_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crop_code": {"name": "crop_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/schema.yml", "build_path": null, "deferred": false}, "model.subsurface.stg__municipalities": {"raw_sql": "select\n    com_code as municipality_code\n    ,com_nom as municipality_label\n    ,dep_code as department_code\n    ,dep_nom_num as department_label\n    ,reg_code as region_code\n    ,reg_nom as region_label\nfrom\n  {{ source('geo', 'communes') }}", "database": "subsurface_space", "schema": "stage", "fqn": ["subsurface", "staging", "stg__municipalities"], "unique_id": "model.subsurface.stg__municipalities", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "staging/stg__municipalities.sql", "original_file_path": "models/staging/stg__municipalities.sql", "name": "stg__municipalities", "resource_type": "model", "alias": "stg__municipalities", "checksum": {"name": "sha256", "checksum": "5adeecc802c4c28b6af1066b08ed6f06b1bb7879851dbec2b4e578e75ecbe123"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stage", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["geo", "communes"]], "depends_on": {"macros": [], "nodes": ["source.subsurface.geo.communes"]}, "description": "municipalities, departement and region", "columns": {"municipality_code": {"name": "municipality_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "municipality_label": {"name": "municipality_label", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_code": {"name": "department_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_label": {"name": "department_label", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region_code": {"name": "region_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region_label": {"name": "region_label", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/schema.yml", "build_path": null, "deferred": false}, "analysis.subsurface.most_expensive_departments_for_flats": {"raw_sql": "select\n  d_municipalities.department_code\n  ,d_municipalities.department_label\n  ,avg(f_land_values.transaction_amount / f_land_values.built_surface) as mean_square_meter_price\nfrom\n  {{ ref('f_land_values') }} as f_land_values\n  join {{ ref('d_municipalities') }} as d_municipalities on d_municipalities.municipality_code = f_land_values.municipality_code\nwhere\n  f_land_values.premises_code = '2'\n  and f_land_values.built_surface > 0\n  and f_land_values.land_surface = 0\n  and f_land_values.transfer_label = 'Sale'\ngroup by\n  d_municipalities.department_code\n  ,d_municipalities.department_label\norder by\n  3 desc", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "analysis", "most_expensive_departments_for_flats"], "unique_id": "analysis.subsurface.most_expensive_departments_for_flats", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "analysis/most_expensive_departments_for_flats.sql", "original_file_path": "analysis/most_expensive_departments_for_flats.sql", "name": "most_expensive_departments_for_flats", "resource_type": "analysis", "alias": "most_expensive_departments_for_flats", "checksum": {"name": "sha256", "checksum": "e392f643ee1f84d97785ed9e13aa12923bd4731d6b1d58a71af73fecb4222f81"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["f_land_values"], ["d_municipalities"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.subsurface.f_land_values", "model.subsurface.d_municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "analysis.subsurface.transactions_seasonality": {"raw_sql": "select\n    date_part('month', transaction_date) as month_number\n    ,to_char(transaction_date, 'MON') as month_label\n    ,transfer_label\n    ,count(*) as transactions_count\nfrom\n    {{ ref('f_land_values') }}\ngroup by\n    1, 2, 3\norder by\n    3, 1", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "analysis", "transactions_seasonality"], "unique_id": "analysis.subsurface.transactions_seasonality", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "analysis/transactions_seasonality.sql", "original_file_path": "analysis/transactions_seasonality.sql", "name": "transactions_seasonality", "resource_type": "analysis", "alias": "transactions_seasonality", "checksum": {"name": "sha256", "checksum": "8a7176935450fa721143f87f7080b89f51c01fb735dc986795608f9a657db8c8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.subsurface.f_land_values"]}, "description": "what is the transactions monthly frequency", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "analysis/schema.yml", "build_path": null, "deferred": false}, "test.subsurface.stg__land_values_built_surface_implies_premises_code": {"raw_sql": "select\n  *\nfrom\n  {{ ref('stg__land_values') }}\nwhere\n  built_surface is not null\n  and premises_code is null", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "data_test", "stg__land_values_built_surface_implies_premises_code"], "unique_id": "test.subsurface.stg__land_values_built_surface_implies_premises_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "data_test/stg__land_values_built_surface_implies_premises_code.sql", "original_file_path": "tests/stg__land_values_built_surface_implies_premises_code.sql", "name": "stg__land_values_built_surface_implies_premises_code", "resource_type": "test", "alias": "stg__land_values_built_surface_implies_premises_code", "checksum": {"name": "sha256", "checksum": "ee115489939204acab69a1a5ed24c9b53acb4b5b1eb2d965316e08877157e6c5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["data"], "refs": [["stg__land_values"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.subsurface.stg__land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "test.subsurface.stg__land_values_land_surface_implies_crop_code": {"raw_sql": "select\n  *\nfrom\n  {{ ref('stg__land_values') }}\nwhere\n  land_surface is not null\n  and crop_code is null", "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "data_test", "stg__land_values_land_surface_implies_crop_code"], "unique_id": "test.subsurface.stg__land_values_land_surface_implies_crop_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "data_test/stg__land_values_land_surface_implies_crop_code.sql", "original_file_path": "tests/stg__land_values_land_surface_implies_crop_code.sql", "name": "stg__land_values_land_surface_implies_crop_code", "resource_type": "test", "alias": "stg__land_values_land_surface_implies_crop_code", "checksum": {"name": "sha256", "checksum": "77a8e26efb4ac6b047f65f3e1ed1e67bed46914ecf349437d15df8480cc6a537"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["data"], "refs": [["stg__land_values"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.subsurface.stg__land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "seed.subsurface.crop_types": {"raw_sql": "", "database": "subsurface_space", "schema": "reference", "fqn": ["subsurface", "crop_types"], "unique_id": "seed.subsurface.crop_types", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "crop_types.csv", "original_file_path": "data/crop_types.csv", "name": "crop_types", "resource_type": "seed", "alias": "crop_types", "checksum": {"name": "sha256", "checksum": "0fb1cb330e03437324b0528c9ae45059b5ff4949e75d7ee493b705d6aa4ad253"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "reference", "database": null, "tags": [], "full_refresh": true, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "types of crops, cultures", "columns": {"crop_code": {"name": "crop_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crop_label": {"name": "crop_label", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data/seeds.yml", "build_path": null, "deferred": false}, "seed.subsurface.premises_types": {"raw_sql": "", "database": "subsurface_space", "schema": "reference", "fqn": ["subsurface", "premises_types"], "unique_id": "seed.subsurface.premises_types", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "premises_types.csv", "original_file_path": "data/premises_types.csv", "name": "premises_types", "resource_type": "seed", "alias": "premises_types", "checksum": {"name": "sha256", "checksum": "c6d3eb8439e47bdf095c2018df7c9c5e11dc949f4331ee27ff7ccc23f3e75c3b"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"premises_code": "varchar"}, "alias": null, "schema": "reference", "database": null, "tags": [], "full_refresh": true, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "types of premises", "columns": {"premises_code": {"name": "premises_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premises_label_fr": {"name": "premises_label_fr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "premises_label_en": {"name": "premises_label_en", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data/seeds.yml", "build_path": null, "deferred": false}, "seed.subsurface.transfer_types": {"raw_sql": "", "database": "subsurface_space", "schema": "reference", "fqn": ["subsurface", "transfer_types"], "unique_id": "seed.subsurface.transfer_types", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "transfer_types.csv", "original_file_path": "data/transfer_types.csv", "name": "transfer_types", "resource_type": "seed", "alias": "transfer_types", "checksum": {"name": "sha256", "checksum": "1a3481a7f2fd36a646ea6b60510dbee0857eedebb81b064e3e2bfffc1944b50c"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "reference", "database": null, "tags": [], "full_refresh": true, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "types of transfer of ownership", "columns": {"transfer_label_fr": {"name": "transfer_label_fr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_label_en": {"name": "transfer_label_en", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "data/seeds.yml", "build_path": null, "deferred": false}, "test.subsurface.not_null_f_land_values_transaction_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transaction_date", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_transaction_date"], "unique_id": "test.subsurface.not_null_f_land_values_transaction_date", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_transaction_date.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_transaction_date", "resource_type": "test", "alias": "not_null_f_land_values_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transaction_date"}, "test.subsurface.not_null_f_land_values_transaction_amount": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transaction_amount", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_transaction_amount"], "unique_id": "test.subsurface.not_null_f_land_values_transaction_amount", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_transaction_amount.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_transaction_amount", "resource_type": "test", "alias": "not_null_f_land_values_transaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transaction_amount"}, "test.subsurface.not_null_f_land_values_transfer_label": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transfer_label", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_transfer_label"], "unique_id": "test.subsurface.not_null_f_land_values_transfer_label", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_transfer_label.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_transfer_label", "resource_type": "test", "alias": "not_null_f_land_values_transfer_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transfer_label"}, "test.subsurface.not_null_f_land_values_lane_type": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "lane_type", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_lane_type"], "unique_id": "test.subsurface.not_null_f_land_values_lane_type", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_lane_type.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_lane_type", "resource_type": "test", "alias": "not_null_f_land_values_lane_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "lane_type"}, "test.subsurface.not_null_f_land_values_lane_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "lane_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_lane_code"], "unique_id": "test.subsurface.not_null_f_land_values_lane_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_lane_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_lane_code", "resource_type": "test", "alias": "not_null_f_land_values_lane_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "lane_code"}, "test.subsurface.not_null_f_land_values_lane": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "lane", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_lane"], "unique_id": "test.subsurface.not_null_f_land_values_lane", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_lane.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_lane", "resource_type": "test", "alias": "not_null_f_land_values_lane", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "lane"}, "test.subsurface.not_null_f_land_values_zip_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "zip_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_zip_code"], "unique_id": "test.subsurface.not_null_f_land_values_zip_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_zip_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_zip_code", "resource_type": "test", "alias": "not_null_f_land_values_zip_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "zip_code"}, "test.subsurface.not_null_f_land_values_municipality_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "municipality_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_municipality_code"], "unique_id": "test.subsurface.not_null_f_land_values_municipality_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_municipality_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_municipality_code", "resource_type": "test", "alias": "not_null_f_land_values_municipality_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_code"}, "test.subsurface.relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('d_municipalities')", "field": "municipality_code", "column_name": "municipality_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_"], "unique_id": "test.subsurface.relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/relationships_f_land_values_9963e82f8f09f5f13345aec2b504b5a5.sql", "original_file_path": "models/marts/schema.yml", "name": "relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_", "resource_type": "test", "alias": "relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_municipalities"], ["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.subsurface.d_municipalities", "model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_code"}, "test.subsurface.not_null_f_land_values_lots_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "lots_count", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_lots_count"], "unique_id": "test.subsurface.not_null_f_land_values_lots_count", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_lots_count.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_lots_count", "resource_type": "test", "alias": "not_null_f_land_values_lots_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "lots_count"}, "test.subsurface.not_null_f_land_values_premises_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "premises_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_premises_code"], "unique_id": "test.subsurface.not_null_f_land_values_premises_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_premises_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_premises_code", "resource_type": "test", "alias": "not_null_f_land_values_premises_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_code"}, "test.subsurface.relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('d_premises_types')", "field": "premises_code", "column_name": "premises_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_"], "unique_id": "test.subsurface.relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/relationships_f_land_values_601770e576bb02eea8f782d8b9657f09.sql", "original_file_path": "models/marts/schema.yml", "name": "relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_", "resource_type": "test", "alias": "relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_premises_types"], ["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.subsurface.d_premises_types", "model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_code"}, "test.subsurface.not_null_f_land_values_built_surface": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "built_surface", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_built_surface"], "unique_id": "test.subsurface.not_null_f_land_values_built_surface", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_built_surface.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_built_surface", "resource_type": "test", "alias": "not_null_f_land_values_built_surface", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "built_surface"}, "test.subsurface.not_null_f_land_values_land_surface": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "land_surface", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_land_surface"], "unique_id": "test.subsurface.not_null_f_land_values_land_surface", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_land_surface.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_land_surface", "resource_type": "test", "alias": "not_null_f_land_values_land_surface", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "land_surface"}, "test.subsurface.not_null_f_land_values_main_rooms_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "main_rooms_count", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_main_rooms_count"], "unique_id": "test.subsurface.not_null_f_land_values_main_rooms_count", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_main_rooms_count.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_main_rooms_count", "resource_type": "test", "alias": "not_null_f_land_values_main_rooms_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "main_rooms_count"}, "test.subsurface.not_null_f_land_values_crop_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "crop_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_f_land_values_crop_code"], "unique_id": "test.subsurface.not_null_f_land_values_crop_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_f_land_values_crop_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_f_land_values_crop_code", "resource_type": "test", "alias": "not_null_f_land_values_crop_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "crop_code"}, "test.subsurface.relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('d_crop_types')", "field": "crop_code", "column_name": "crop_code", "model": "{{ ref('f_land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_"], "unique_id": "test.subsurface.relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/relationships_f_land_values_31e8b560f7a066055d2e9e3cbda4d4fd.sql", "original_file_path": "models/marts/schema.yml", "name": "relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_", "resource_type": "test", "alias": "relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_crop_types"], ["f_land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.subsurface.d_crop_types", "model.subsurface.f_land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "crop_code"}, "test.subsurface.not_null_d_crop_types_crop_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "crop_code", "model": "{{ ref('d_crop_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_d_crop_types_crop_code"], "unique_id": "test.subsurface.not_null_d_crop_types_crop_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_d_crop_types_crop_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_d_crop_types_crop_code", "resource_type": "test", "alias": "not_null_d_crop_types_crop_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_crop_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.d_crop_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "crop_code"}, "test.subsurface.unique_d_crop_types_crop_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "crop_code", "model": "{{ ref('d_crop_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_d_crop_types_crop_code"], "unique_id": "test.subsurface.unique_d_crop_types_crop_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_d_crop_types_crop_code.sql", "original_file_path": "models/marts/schema.yml", "name": "unique_d_crop_types_crop_code", "resource_type": "test", "alias": "unique_d_crop_types_crop_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_crop_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.subsurface.d_crop_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "crop_code"}, "test.subsurface.not_null_d_premises_types_premises_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "premises_code", "model": "{{ ref('d_premises_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_d_premises_types_premises_code"], "unique_id": "test.subsurface.not_null_d_premises_types_premises_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_d_premises_types_premises_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_d_premises_types_premises_code", "resource_type": "test", "alias": "not_null_d_premises_types_premises_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_premises_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.d_premises_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_code"}, "test.subsurface.unique_d_premises_types_premises_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "premises_code", "model": "{{ ref('d_premises_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_d_premises_types_premises_code"], "unique_id": "test.subsurface.unique_d_premises_types_premises_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_d_premises_types_premises_code.sql", "original_file_path": "models/marts/schema.yml", "name": "unique_d_premises_types_premises_code", "resource_type": "test", "alias": "unique_d_premises_types_premises_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_premises_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.subsurface.d_premises_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_code"}, "test.subsurface.not_null_d_municipalities_municipality_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "municipality_code", "model": "{{ ref('d_municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_d_municipalities_municipality_code"], "unique_id": "test.subsurface.not_null_d_municipalities_municipality_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_d_municipalities_municipality_code.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_d_municipalities_municipality_code", "resource_type": "test", "alias": "not_null_d_municipalities_municipality_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.d_municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_code"}, "test.subsurface.unique_d_municipalities_municipality_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "municipality_code", "model": "{{ ref('d_municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_d_municipalities_municipality_code"], "unique_id": "test.subsurface.unique_d_municipalities_municipality_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_d_municipalities_municipality_code.sql", "original_file_path": "models/marts/schema.yml", "name": "unique_d_municipalities_municipality_code", "resource_type": "test", "alias": "unique_d_municipalities_municipality_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["d_municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.subsurface.d_municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_code"}, "test.subsurface.not_null_stg__land_values_transaction_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transaction_date", "model": "{{ ref('stg__land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__land_values_transaction_date"], "unique_id": "test.subsurface.not_null_stg__land_values_transaction_date", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__land_values_transaction_date.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__land_values_transaction_date", "resource_type": "test", "alias": "not_null_stg__land_values_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transaction_date"}, "test.subsurface.not_null_stg__land_values_transfer_label_fr": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transfer_label_fr", "model": "{{ ref('stg__land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__land_values_transfer_label_fr"], "unique_id": "test.subsurface.not_null_stg__land_values_transfer_label_fr", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__land_values_transfer_label_fr.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__land_values_transfer_label_fr", "resource_type": "test", "alias": "not_null_stg__land_values_transfer_label_fr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transfer_label_fr"}, "test.subsurface.relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('transfer_types')", "field": "transfer_label_fr", "column_name": "transfer_label_fr", "model": "{{ ref('stg__land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_"], "unique_id": "test.subsurface.relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/relationships_stg__land_values_b2e0c79b749681716848ecd78df2f275.sql", "original_file_path": "models/staging/schema.yml", "name": "relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_", "resource_type": "test", "alias": "relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["transfer_types"], ["stg__land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["seed.subsurface.transfer_types", "model.subsurface.stg__land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transfer_label_fr"}, "test.subsurface.not_null_stg__land_values_municipality_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "municipality_code", "model": "{{ ref('stg__land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__land_values_municipality_code"], "unique_id": "test.subsurface.not_null_stg__land_values_municipality_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__land_values_municipality_code.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__land_values_municipality_code", "resource_type": "test", "alias": "not_null_stg__land_values_municipality_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_code"}, "test.subsurface.not_null_stg__land_values_lots_count": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "lots_count", "model": "{{ ref('stg__land_values') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__land_values_lots_count"], "unique_id": "test.subsurface.not_null_stg__land_values_lots_count", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__land_values_lots_count.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__land_values_lots_count", "resource_type": "test", "alias": "not_null_stg__land_values_lots_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__land_values"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__land_values"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "lots_count"}, "test.subsurface.not_null_stg__municipalities_municipality_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "municipality_code", "model": "{{ ref('stg__municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__municipalities_municipality_code"], "unique_id": "test.subsurface.not_null_stg__municipalities_municipality_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__municipalities_municipality_code.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__municipalities_municipality_code", "resource_type": "test", "alias": "not_null_stg__municipalities_municipality_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_code"}, "test.subsurface.unique_stg__municipalities_municipality_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "municipality_code", "model": "{{ ref('stg__municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_stg__municipalities_municipality_code"], "unique_id": "test.subsurface.unique_stg__municipalities_municipality_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_stg__municipalities_municipality_code.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg__municipalities_municipality_code", "resource_type": "test", "alias": "unique_stg__municipalities_municipality_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_code"}, "test.subsurface.not_null_stg__municipalities_municipality_label": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "municipality_label", "model": "{{ ref('stg__municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__municipalities_municipality_label"], "unique_id": "test.subsurface.not_null_stg__municipalities_municipality_label", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__municipalities_municipality_label.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__municipalities_municipality_label", "resource_type": "test", "alias": "not_null_stg__municipalities_municipality_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "municipality_label"}, "test.subsurface.not_null_stg__municipalities_department_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "department_code", "model": "{{ ref('stg__municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__municipalities_department_code"], "unique_id": "test.subsurface.not_null_stg__municipalities_department_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__municipalities_department_code.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__municipalities_department_code", "resource_type": "test", "alias": "not_null_stg__municipalities_department_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "department_code"}, "test.subsurface.not_null_stg__municipalities_department_label": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "department_label", "model": "{{ ref('stg__municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__municipalities_department_label"], "unique_id": "test.subsurface.not_null_stg__municipalities_department_label", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__municipalities_department_label.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__municipalities_department_label", "resource_type": "test", "alias": "not_null_stg__municipalities_department_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "department_label"}, "test.subsurface.not_null_stg__municipalities_region_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "region_code", "model": "{{ ref('stg__municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__municipalities_region_code"], "unique_id": "test.subsurface.not_null_stg__municipalities_region_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__municipalities_region_code.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__municipalities_region_code", "resource_type": "test", "alias": "not_null_stg__municipalities_region_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "region_code"}, "test.subsurface.not_null_stg__municipalities_region_label": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "region_label", "model": "{{ ref('stg__municipalities') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_stg__municipalities_region_label"], "unique_id": "test.subsurface.not_null_stg__municipalities_region_label", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_stg__municipalities_region_label.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg__municipalities_region_label", "resource_type": "test", "alias": "not_null_stg__municipalities_region_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg__municipalities"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.subsurface.stg__municipalities"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "region_label"}, "test.subsurface.not_null_crop_types_crop_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "crop_code", "model": "{{ ref('crop_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_crop_types_crop_code"], "unique_id": "test.subsurface.not_null_crop_types_crop_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_crop_types_crop_code.sql", "original_file_path": "data/seeds.yml", "name": "not_null_crop_types_crop_code", "resource_type": "test", "alias": "not_null_crop_types_crop_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["crop_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.subsurface.crop_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "crop_code"}, "test.subsurface.unique_crop_types_crop_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "crop_code", "model": "{{ ref('crop_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_crop_types_crop_code"], "unique_id": "test.subsurface.unique_crop_types_crop_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_crop_types_crop_code.sql", "original_file_path": "data/seeds.yml", "name": "unique_crop_types_crop_code", "resource_type": "test", "alias": "unique_crop_types_crop_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["crop_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.subsurface.crop_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "crop_code"}, "test.subsurface.not_null_crop_types_crop_label": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "crop_label", "model": "{{ ref('crop_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_crop_types_crop_label"], "unique_id": "test.subsurface.not_null_crop_types_crop_label", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_crop_types_crop_label.sql", "original_file_path": "data/seeds.yml", "name": "not_null_crop_types_crop_label", "resource_type": "test", "alias": "not_null_crop_types_crop_label", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["crop_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.subsurface.crop_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "crop_label"}, "test.subsurface.not_null_premises_types_premises_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "premises_code", "model": "{{ ref('premises_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_premises_types_premises_code"], "unique_id": "test.subsurface.not_null_premises_types_premises_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_premises_types_premises_code.sql", "original_file_path": "data/seeds.yml", "name": "not_null_premises_types_premises_code", "resource_type": "test", "alias": "not_null_premises_types_premises_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["premises_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.subsurface.premises_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_code"}, "test.subsurface.unique_premises_types_premises_code": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "premises_code", "model": "{{ ref('premises_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_premises_types_premises_code"], "unique_id": "test.subsurface.unique_premises_types_premises_code", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_premises_types_premises_code.sql", "original_file_path": "data/seeds.yml", "name": "unique_premises_types_premises_code", "resource_type": "test", "alias": "unique_premises_types_premises_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["premises_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.subsurface.premises_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_code"}, "test.subsurface.not_null_premises_types_premises_label_fr": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "premises_label_fr", "model": "{{ ref('premises_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_premises_types_premises_label_fr"], "unique_id": "test.subsurface.not_null_premises_types_premises_label_fr", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_premises_types_premises_label_fr.sql", "original_file_path": "data/seeds.yml", "name": "not_null_premises_types_premises_label_fr", "resource_type": "test", "alias": "not_null_premises_types_premises_label_fr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["premises_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.subsurface.premises_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_label_fr"}, "test.subsurface.not_null_premises_types_premises_label_en": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "premises_label_en", "model": "{{ ref('premises_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_premises_types_premises_label_en"], "unique_id": "test.subsurface.not_null_premises_types_premises_label_en", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_premises_types_premises_label_en.sql", "original_file_path": "data/seeds.yml", "name": "not_null_premises_types_premises_label_en", "resource_type": "test", "alias": "not_null_premises_types_premises_label_en", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["premises_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.subsurface.premises_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "premises_label_en"}, "test.subsurface.not_null_transfer_types_transfer_label_fr": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transfer_label_fr", "model": "{{ ref('transfer_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_transfer_types_transfer_label_fr"], "unique_id": "test.subsurface.not_null_transfer_types_transfer_label_fr", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_transfer_types_transfer_label_fr.sql", "original_file_path": "data/seeds.yml", "name": "not_null_transfer_types_transfer_label_fr", "resource_type": "test", "alias": "not_null_transfer_types_transfer_label_fr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["transfer_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.subsurface.transfer_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transfer_label_fr"}, "test.subsurface.unique_transfer_types_transfer_label_fr": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "transfer_label_fr", "model": "{{ ref('transfer_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_transfer_types_transfer_label_fr"], "unique_id": "test.subsurface.unique_transfer_types_transfer_label_fr", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_transfer_types_transfer_label_fr.sql", "original_file_path": "data/seeds.yml", "name": "unique_transfer_types_transfer_label_fr", "resource_type": "test", "alias": "unique_transfer_types_transfer_label_fr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["transfer_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.subsurface.transfer_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transfer_label_fr"}, "test.subsurface.not_null_transfer_types_transfer_label_en": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transfer_label_en", "model": "{{ ref('transfer_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "not_null_transfer_types_transfer_label_en"], "unique_id": "test.subsurface.not_null_transfer_types_transfer_label_en", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/not_null_transfer_types_transfer_label_en.sql", "original_file_path": "data/seeds.yml", "name": "not_null_transfer_types_transfer_label_en", "resource_type": "test", "alias": "not_null_transfer_types_transfer_label_en", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["transfer_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.subsurface.transfer_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transfer_label_en"}, "test.subsurface.unique_transfer_types_transfer_label_en": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "transfer_label_en", "model": "{{ ref('transfer_types') }}"}}, "database": "subsurface_space", "schema": "no_schema", "fqn": ["subsurface", "schema_test", "unique_transfer_types_transfer_label_en"], "unique_id": "test.subsurface.unique_transfer_types_transfer_label_en", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "schema_test/unique_transfer_types_transfer_label_en.sql", "original_file_path": "data/seeds.yml", "name": "unique_transfer_types_transfer_label_en", "resource_type": "test", "alias": "unique_transfer_types_transfer_label_en", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["transfer_types"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.subsurface.transfer_types"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "transfer_label_en"}}, "sources": {"source.subsurface.land_values.valeurs_foncieres": {"fqn": ["subsurface", "sources", "land_values", "valeurs_foncieres"], "database": "subsurface_datalake", "schema": "no_schema", "unique_id": "source.subsurface.land_values.valeurs_foncieres", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "valeurs_foncieres", "source_name": "land_values", "source_description": "land value at transaction time", "loader": "", "identifier": "valeurs_foncieres", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "land values at transaction time", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.subsurface.geo.communes": {"fqn": ["subsurface", "sources", "geo", "communes"], "database": "subsurface_datalake", "schema": "geo", "unique_id": "source.subsurface.geo.communes", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "communes", "source_name": "geo", "source_description": "geographic reference data", "loader": "", "identifier": "communes.csv", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "municipalities", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}}, "macros": {"macro.subsurface.generate_database_name": {"unique_id": "macro.subsurface.generate_database_name", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "macros/get_custom_database.sql", "original_file_path": "macros/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n  {%- set default_database = target.database -%}\n  {%- if target.name == 'managed' %}\n    {%- if custom_database_name is not none -%}\n      {{ custom_database_name | trim }}\n    {%- elif default_database is not none -%}\n      {{ default_database }}\n\t  {%- else -%}\n\t    {{ target.environment }}\n\t\t{%- endif -%}\n\t{%- else -%}\n\t  {%- if default_database is not none %}\n\t\t   {{ default_database }}\n\t\t{% else %}\n\t\t   {{ get_user_database() }}\n\t\t{%- endif -%}\n\t{%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.subsurface.generate_schema_name": {"unique_id": "macro.subsurface.generate_schema_name", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'managed' and custom_schema_name is not none -%}\n      {{ custom_schema_name | trim }}\n    {%- else -%}\n      {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.subsurface.columns_csv": {"unique_id": "macro.subsurface.columns_csv", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "macros/non_regression_test.sql", "original_file_path": "macros/non_regression_test.sql", "name": "columns_csv", "macro_sql": "{%- macro columns_csv(model, columns, alias=true, prefix=none, nullify=false) -%}\r\n    {%- for column in columns -%}\r\n        cast(\r\n        {%- if not nullify -%}\r\n          {{ model }}.{{ column.name }}\r\n        {%- else -%}\r\n          null\r\n        {%- endif %} as {{ column.data_type }}){% if alias %} as\r\n        {%- if prefix is not none %} {{ prefix }}_{%- else %} {% endif -%}{{ column.name }}{% endif %}\r\n        {%- if not loop.last %}, {% endif -%}\r\n    {% endfor -%}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.subsurface.join_on_columns": {"unique_id": "macro.subsurface.join_on_columns", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "macros/non_regression_test.sql", "original_file_path": "macros/non_regression_test.sql", "name": "join_on_columns", "macro_sql": "{%- macro join_on_columns(model1, model2, columns) -%}\r\n    {%- for column in columns -%}\r\n        {{ model1 }}.{{ column.name }} = {{ model2 }}.{{ column.name }}\r\n        {%- if not loop.last %} and {% endif -%}\r\n    {%- endfor -%}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.subsurface.columns_inequality": {"unique_id": "macro.subsurface.columns_inequality", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "macros/non_regression_test.sql", "original_file_path": "macros/non_regression_test.sql", "name": "columns_inequality", "macro_sql": "{%- macro columns_inequality(model1, model2, columns) -%}\r\n    {%- for column in columns -%}\r\n      {{ model1 }}.{{ column.name }} is distinct from {{ model2 }}.{{ column.name }}\r\n      {% if not loop.last %} or {% endif -%}\r\n    {%- endfor -%}\r\n{%- endmacro -%}\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.subsurface.non_regression_test": {"unique_id": "macro.subsurface.non_regression_test", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "macros/non_regression_test.sql", "original_file_path": "macros/non_regression_test.sql", "name": "non_regression_test", "macro_sql": "{% macro non_regression_test(unmanaged_model, managed_model_database, managed_model_schema, managed_model_identifier, pk) %}\r\n-- depends_on: {{ ref(unmanaged_model) }}\r\n{% set unmanaged_model = ref(unmanaged_model) %}\r\n{% set managed_model = api.Relation.create(database=managed_model_database, schema=managed_model_schema, identifier=managed_model_identifier) %}\r\n{% set managed_cols = adapter.get_columns_in_relation(managed_model) %}\r\n{% set managed_colnames = managed_cols | map(attribute='name') | list %}\r\n{% set unmanaged_cols = adapter.get_columns_in_relation(unmanaged_model) %}\r\n{% set unmanaged_colnames = unmanaged_cols | map(attribute='name') | list %}\r\n{% set pk_cols = managed_cols | selectattr('name', 'in', pk) | list %}\r\n{% set pk_colnames = pk_cols | map(attribute='name') | list %}\r\n{% set nrt_cols = unmanaged_cols | rejectattr('name', 'in', pk) | selectattr('name', 'in', managed_colnames) | list %}\r\n{% set nrt_colnames = nrt_cols | map(attribute='name') | list %}\r\n\r\nselect\r\n  md5(concat({{ columns_csv('managed', pk_cols, alias=false) }})) as tnr_id\r\n  ,{{ columns_csv('managed', pk_cols) }}\r\n  ,'difference' AS change_type\r\n  ,{{ columns_csv('unmanaged', nrt_cols, prefix='unmanaged') }}\r\n  ,{{ columns_csv('managed', nrt_cols, prefix='managed') }}\r\nfrom {{ managed_model }} as managed\r\njoin {{ unmanaged_model }} as unmanaged\r\n  on ({{ join_on_columns('managed', 'unmanaged', pk_cols) }})\r\nwhere {{ columns_inequality('managed', 'unmanaged', nrt_cols) }}\r\n\r\nunion all\r\n\r\nselect\r\n  md5(concat({{ columns_csv('managed', pk_cols, alias=false) }}))\r\n  ,{{ columns_csv('managed', pk_cols, alias=false) }}\r\n  ,'missing'\r\n  ,{{ columns_csv('unmanaged', nrt_cols, prefix='unmanaged', nullify=true, alias=false) }}\r\n  ,{{ columns_csv('managed', nrt_cols, prefix='managed', alias=false) }}\r\nfrom\r\n  {{ managed_model }} as managed\r\nwhere not exists (\r\n  select 1\r\n  from {{ unmanaged_model }} as unmanaged\r\n  where ({{ join_on_columns('unmanaged', 'managed', pk_cols) }})\r\n)\r\n\r\nunion all\r\n\r\nselect\r\n  md5(concat({{ columns_csv('unmanaged', pk_cols, alias=false) }}))\r\n  ,{{ columns_csv('unmanaged', pk_cols, alias=false) }}\r\n  ,'unexpected'\r\n  ,{{ columns_csv('unmanaged', nrt_cols, prefix='unmanaged', alias=false) }}\r\n  ,{{ columns_csv('managed', nrt_cols, prefix='managed', nullify=true, alias=false) }}\r\nfrom\r\n  {{ unmanaged_model }} as unmanaged\r\nwhere not exists (\r\n  select 1\r\n  from {{ managed_model }} as managed\r\n  where ({{ join_on_columns('managed', 'unmanaged', pk_cols) }})\r\n)\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__get_catalog": {"unique_id": "macro.dbt_dremio.dremio__get_catalog", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "dremio__get_catalog", "macro_sql": "{% macro dremio__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n  with cols(table_database,\n    table_schema,\n    table_name,\n    table_type,\n    table_comment,\n    column_name,\n    column_index,\n    column_type,\n    column_comment,\n    table_owner) as (\n  select lower(case when position('.' in columns.table_schema) > 0\n        then substring(columns.table_schema, 1, position('.' in columns.table_schema) - 1)\n        else columns.table_schema\n    end)\n    ,lower(case when position('.' in columns.table_schema) > 0\n        then substring(columns.table_schema, position('.' in columns.table_schema) + 1)\n        else 'no_schema'\n    end)\n    ,lower(columns.table_name)\n    ,lower(t.table_type)\n    ,cast(null as varchar)\n    ,lower(column_name)\n    ,ordinal_position\n    ,lower(data_type)\n    ,cast(null as varchar)\n    ,cast(null as varchar)\n  from information_schema.columns\n      join information_schema.\"tables\" as t\n          on (t.table_schema = columns.table_schema\n              and t.table_name = columns.table_name)\n  union all\n  select\n    lower(case when position('.' in table_schema) > 0\n            then substring(table_schema, 1, position('.' in table_schema) - 1)\n            else table_schema\n        end)\n    ,lower(case when position('.' in table_schema) > 0\n            then substring(table_schema, position('.' in table_schema) + 1)\n            else 'no_schema'\n        end)\n    ,lower(name)\n    ,'materializedview'\n    ,initcap(type) || ' Reflection'\n    ,lower(column_name)\n    ,ordinal_position\n    ,lower(data_type)\n    ,case\n        when strpos(',' || replace(displayColumns, ' ', '') || ',', ',' || column_name || ',') > 0 then 'Display'\n        when strpos(',' || replace(dimensions, ' ', '') || ',', ',' || column_name || ',') > 0 then 'Dimension'\n        when strpos(',' || replace(measures, ' ', '') || ',', ',' || column_name || ',') > 0 then 'Measure'\n    end\n    || case\n        when strpos(',' || replace(sortColumns, ' ', '') || ',', ',' || column_name || ',') > 0 then ', Sort'\n        else ''\n    end\n    || case\n        when strpos(',' || replace(partitionColumns, ' ', '') || ',', ',' || column_name || ',') > 0 then ', Partition'\n        else ''\n    end\n    || case\n        when strpos(',' || replace(distributionColumns, ' ', '') || ',', ',' || column_name || ',') > 0 then ', Distribute'\n        else ''\n    end\n    ,cast(null as varchar)\n  from sys.reflections\n  join information_schema.columns\n      on (columns.table_schema || '.' || columns.table_name = replace(dataset, '\"', '')\n          and (strpos(',' || replace(displayColumns, ' ', '') || ',', ',' || column_name || ',') > 0\n              or strpos(',' || replace(dimensions, ' ', '') || ',', ',' || column_name || ',') > 0\n              or strpos(',' || replace(measures, ' ', '') || ',', ',' || column_name || ',') > 0))\n  )\n  select *\n  from cols\n  where table_type <> 'SYSTEM_TABLE'\n    and table_database = lower('{{ information_schema.database.strip('\"') }}')\n    and (\n        {%- for schema in schemas -%}\n          table_schema = lower('{{ schema.strip('\"') }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n  order by\n      table_schema,\n      table_name,\n      column_index\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__create_schema": {"unique_id": "macro.dbt_dremio.dremio__create_schema", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__create_schema", "macro_sql": "{% macro dremio__create_schema(relation) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'create_schema macro (' + relation.render() + ') not implemented yet for adapter ' + adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__drop_schema": {"unique_id": "macro.dbt_dremio.dremio__drop_schema", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__drop_schema", "macro_sql": "{% macro dremio__drop_schema(relation) -%}\r\n{{ exceptions.raise_not_implemented(\r\n  'drop_schema macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__create_table_as": {"unique_id": "macro.dbt_dremio.dremio__create_table_as", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__create_table_as", "macro_sql": "{% macro dremio__create_table_as(temporary, relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create table\r\n    {{ relation }}\r\n  as (\r\n    {{ sql }}\r\n  )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__create_view_as": {"unique_id": "macro.dbt_dremio.dremio__create_view_as", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__create_view_as", "macro_sql": "{% macro dremio__create_view_as(relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n  create or replace view {{ relation }} as (\r\n    {{ sql }}\r\n  )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__get_columns_in_relation": {"unique_id": "macro.dbt_dremio.dremio__get_columns_in_relation", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__get_columns_in_relation", "macro_sql": "{% macro dremio__get_columns_in_relation(relation) -%}\r\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\r\n    with cols as (\r\n      select lower(case when position('.' in table_schema) > 0\r\n              then substring(table_schema, 1, position('.' in table_schema) - 1)\r\n              else table_schema\r\n          end) as table_catalog\r\n          ,lower(case when position('.' in table_schema) > 0\r\n              then substring(table_schema, position('.' in table_schema) + 1)\r\n              else 'no_schema'\r\n          end) as table_schema\r\n          ,lower(table_name) as table_name\r\n          ,lower(column_name) as column_name\r\n          ,lower(data_type) as data_type\r\n          ,character_maximum_length\r\n          ,numeric_precision\r\n          ,numeric_scale\r\n          ,ordinal_position\r\n      from information_schema.columns\r\n      union all\r\n      select\r\n          lower(case when position('.' in table_schema) > 0\r\n                  then substring(table_schema, 1, position('.' in table_schema) - 1)\r\n                  else table_schema\r\n              end)\r\n          ,lower(case when position('.' in table_schema) > 0\r\n                  then substring(table_schema, position('.' in table_schema) + 1)\r\n                  else 'no_schema'\r\n              end)\r\n          ,lower(name)\r\n          ,lower(column_name)\r\n          ,lower(data_type)\r\n          ,character_maximum_length\r\n          ,numeric_precision\r\n          ,numeric_scale\r\n          ,ordinal_position\r\n      from sys.reflections\r\n      join information_schema.columns\r\n          on (columns.table_schema || '.' || columns.table_name = replace(dataset, '\"', '')\r\n              and (strpos(',' || replace(displayColumns, ' ', '') || ',', ',' || column_name || ',') > 0\r\n                  or strpos(',' || replace(dimensions, ' ', '') || ',', ',' || column_name || ',') > 0\r\n                  or strpos(',' || replace(measures, ' ', '') || ',', ',' || column_name || ',') > 0))\r\n    )\r\n    select column_name\r\n      ,data_type\r\n      ,character_maximum_length\r\n      ,numeric_precision\r\n      ,numeric_scale\r\n    from cols\r\n    where ilike(table_catalog, '{{ relation.database.strip('\"') }}')\r\n      and ilike(table_schema, '{{ relation.schema.strip('\"') }}')\r\n      and ilike(table_name, '{{ relation.identifier.strip('\"') }}')\r\n    order by ordinal_position\r\n  {% endcall %}\r\n  {% set table = load_result('get_columns_in_relation').table %}\r\n  {{ return(sql_convert_columns_in_relation(table)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__alter_column_comment": {"unique_id": "macro.dbt_dremio.dremio__alter_column_comment", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__alter_column_comment", "macro_sql": "{% macro dremio__alter_column_comment(relation, column_dict) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__alter_relation_comment": {"unique_id": "macro.dbt_dremio.dremio__alter_relation_comment", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__alter_relation_comment", "macro_sql": "{% macro dremio__alter_relation_comment(relation, relation_comment) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__alter_column_type": {"unique_id": "macro.dbt_dremio.dremio__alter_column_type", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__alter_column_type", "macro_sql": "{% macro dremio__alter_column_type(relation, column_name, new_column_type) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'alter_column_type macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__drop_relation": {"unique_id": "macro.dbt_dremio.dremio__drop_relation", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__drop_relation", "macro_sql": "{% macro dremio__drop_relation(relation) -%}\r\n  {% call statement('drop_relation', fetch_result=False, auto_begin=False) -%}\r\n    drop {{ relation.type }} if exists {{ relation }}\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__truncate_relation": {"unique_id": "macro.dbt_dremio.dremio__truncate_relation", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__truncate_relation", "macro_sql": "{% macro dremio__truncate_relation(relation) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'truncate_relation macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__rename_relation": {"unique_id": "macro.dbt_dremio.dremio__rename_relation", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__rename_relation", "macro_sql": "{% macro dremio__rename_relation(from_relation, to_relation) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'rename_relation macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__information_schema_name": {"unique_id": "macro.dbt_dremio.dremio__information_schema_name", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__information_schema_name", "macro_sql": "{% macro dremio__information_schema_name(database) -%}\r\n    information_schema\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__list_schemas": {"unique_id": "macro.dbt_dremio.dremio__list_schemas", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__list_schemas", "macro_sql": "{% macro dremio__list_schemas(database) -%}\r\n  {% set sql %}\r\n    with schemata as (\r\n        select lower(case when position('.' in schema_name) > 0\r\n                then substring(schema_name, 1, position('.' in schema_name) - 1)\r\n                else schema_name\r\n            end) as catalog_name\r\n            ,lower(case when position('.' in schema_name) > 0\r\n                then substring(schema_name, position('.' in schema_name) + 1)\r\n                else 'no_schema'\r\n            end) as schema_name\r\n        from information_schema.schemata\r\n    )\r\n    select distinct schema_name\r\n    from schemata\r\n    where ilike(catalog_name, '{{ database.strip('\"') }}')\r\n      -- and schema_name <> 'no_schema'\r\n  {% endset %}\r\n  {{ return(run_query(sql)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__check_schema_exists": {"unique_id": "macro.dbt_dremio.dremio__check_schema_exists", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__check_schema_exists", "macro_sql": "{% macro dremio__check_schema_exists(information_schema, schema) -%}\r\n  {% set sql -%}\r\n    with schemata as (\r\n        select lower(case when position('.' in schema_name) > 0\r\n                then substring(schema_name, 1, position('.' in schema_name) - 1)\r\n                else schema_name\r\n            end) as catalog_name\r\n            ,lower(case when position('.' in schema_name) > 0\r\n                then substring(schema_name, position('.' in schema_name) + 1)\r\n                else 'no_schema'\r\n            end) as schema_name\r\n        from information_schema.schemata\r\n    )\r\n    select count(*)\r\n    from schemata\r\n    where catalog_name = lower('{{ information_schema.database.strip('\"') }}')\r\n      and schema_name = lower('{{ schema.strip('\"') }}')\r\n  {%- endset %}\r\n  {{ return(run_query(sql)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__list_relations_without_caching": {"unique_id": "macro.dbt_dremio.dremio__list_relations_without_caching", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__list_relations_without_caching", "macro_sql": "{% macro dremio__list_relations_without_caching(schema_relation) %}\r\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\r\n    with t1(table_catalog, table_name, table_schema, table_type) as (\r\n    select lower(case when position('.' in table_schema) > 0\r\n            then substring(table_schema, 1, position('.' in table_schema) - 1)\r\n            else table_schema\r\n        end)\r\n        ,lower(table_name)\r\n        ,lower(case when position('.' in table_schema) > 0\r\n            then substring(table_schema, position('.' in table_schema) + 1)\r\n            else 'no_schema'\r\n        end)\r\n        ,lower(table_type)\r\n    from information_schema.\"tables\"\r\n    )\r\n    ,r1(identifier_position, database_end_position, dataset, name, type) as (\r\n        select\r\n            case when \"RIGHT\"(dataset, 1) = '\"'\r\n                then length(dataset) - strpos(substr(reverse(dataset), 2), '\"')\r\n                else length(dataset) - strpos(reverse(dataset), '.') + 2\r\n            end\r\n            ,case when \"LEFT\"(dataset, 1) = '\"'\r\n                then strpos(substr(dataset, 2), '\"') + 1\r\n                else strpos(dataset, '.') - 1\r\n            end\r\n            ,dataset\r\n            ,name\r\n            ,type\r\n        from sys.reflections\r\n    )\r\n    ,r2(table_catalog, table_name, table_schema, table_type) as (\r\n    select\r\n        lower(replace(substr(dataset, 1, database_end_position), '\"', ''))\r\n        ,lower(name)\r\n        ,case when identifier_position - database_end_position > 2\r\n            then lower(replace(substr(dataset, database_end_position + 2, identifier_position - database_end_position - 3), '\"', ''))\r\n            else 'no_schema'\r\n        end\r\n        -- ,lower(type) || 'reflection'\r\n        ,'materializedview'\r\n--        ,replace(substr(dataset, identifier_position), '\"', '') as identifier\r\n    from r1\r\n    )\r\n    ,u(table_catalog, table_name, table_schema, table_type) as (\r\n      select *\r\n      from t1\r\n      union all\r\n      select *\r\n      from r2\r\n    )\r\n\r\n    select *\r\n    from u\r\n    where ilike(table_catalog, '{{ schema_relation.database.strip('\"') }}')\r\n      and ilike(table_schema, '{{ schema_relation.schema.strip('\"') }}')\r\n      and table_type <> 'system_table'\r\n  {% endcall %}\r\n  {% set t = load_result('list_relations_without_caching').table %}\r\n  {{ return(t) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__current_timestamp": {"unique_id": "macro.dbt_dremio.dremio__current_timestamp", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__current_timestamp", "macro_sql": "{% macro dremio__current_timestamp() -%}\r\n  CURRENT_TIMESTAMP\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__make_temp_relation": {"unique_id": "macro.dbt_dremio.dremio__make_temp_relation", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dremio__make_temp_relation", "macro_sql": "{% macro dremio__make_temp_relation(base_relation, suffix) %}\r\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\r\n    {% set tmp_relation = base_relation.incorporate(\r\n                                path={\"identifier\": tmp_identifier}) -%}\r\n\r\n    {% do return(tmp_relation) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio_create_table_as": {"unique_id": "macro.dbt_dremio.dremio_create_table_as", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/helpers.sql", "original_file_path": "macros/helpers.sql", "name": "dremio_create_table_as", "macro_sql": "{% macro dremio_create_table_as(relation, sql, partition=none, distribute=none, sort=none) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create table\r\n    {{ relation }}\r\n  {% if partition is not none %}\r\n    hash partition by ( {{ partition | map('tojson') | join(', ') }} )\r\n  {% endif %}\r\n  {% if distribute is not none %}\r\n    distribute by ( {{ distribute | map('tojson') | join(', ') }} )\r\n  {% endif %}\r\n  {% if sort is not none %}\r\n    localsort by ( {{ sort | map('tojson') | join(', ') }} )\r\n  {% endif %}\r\n  as (\r\n    {{ sql }}\r\n  )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio_create_file_as": {"unique_id": "macro.dbt_dremio.dremio_create_file_as", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/helpers.sql", "original_file_path": "macros/helpers.sql", "name": "dremio_create_file_as", "macro_sql": "{% macro dremio_create_file_as(relation, sql, partition=none, distribute=none, sort=none,\r\n  type='parquet', output_extension=none, line_delimiter=none,\r\n    field_delimiter=none, quote=none, escape=none,\r\n    pretty_print=none, with_single_writer=false) -%}\r\n\r\n  create table\r\n    {{ relation }}\r\n  {% if partition is not none %}\r\n    hash partition by ( {{ partition | map('tojson') | join(', ') }} )\r\n  {% endif %}\r\n  {% if distribute is not none %}\r\n    distribute by ( {{ distribute | map('tojson') | join(', ') }} )\r\n  {% endif %}\r\n  {% if sort is not none %}\r\n    localsort by ( {{ sort | map('tojson') | join(', ') }} )\r\n  {% endif %}\r\n  as (\r\n    {{ sql }}\r\n  )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.get_user_database": {"unique_id": "macro.dbt_dremio.get_user_database", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/helpers.sql", "original_file_path": "macros/helpers.sql", "name": "get_user_database", "macro_sql": "{% macro get_user_database() %}\r\n  {{ '@' ~ target.user | trim }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.drop_reflection_if_exists": {"unique_id": "macro.dbt_dremio.drop_reflection_if_exists", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/helpers.sql", "original_file_path": "macros/helpers.sql", "name": "drop_reflection_if_exists", "macro_sql": "{% macro drop_reflection_if_exists(view, reflection) %}\r\n  {% if reflection is not none %}\r\n    {% call statement('drop reflection') -%}\r\n      alter dataset {{ view }} drop reflection {{ reflection.include(database=False, schema=False) }}\r\n    {%- endcall %}\r\n  {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio_get_old_and_target_tables": {"unique_id": "macro.dbt_dremio.dremio_get_old_and_target_tables", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/helpers.sql", "original_file_path": "macros/helpers.sql", "name": "dremio_get_old_and_target_tables", "macro_sql": "{% macro dremio_get_old_and_target_tables(view, materialization_database, materialization_schema) %}\r\n  {% set materialization_schema = (([materialization_schema] if materialization_schema != 'no_schema' else []) + [view.database] + ([ view.schema ] if view.schema != 'no_schema' else [])) | join ('.') %}\r\n  {% set blue_table = api.Relation.create(database=materialization_database, schema=materialization_schema, identifier=(view.identifier ~ '_blue'), type='table') %}\r\n  {% set green_table = api.Relation.create(database=materialization_database, schema=materialization_schema, identifier=(view.identifier ~ '_green'), type='table') %}\r\n  {% set blue_table_exists = load_relation(blue_table) is not none %}\r\n  {% set green_table_exists = load_relation(green_table) is not none %}\r\n  {% set old_table = none %}\r\n  {% set target_table = none %}\r\n  {% if not (green_table_exists and blue_table_exists) %}\r\n      {% if not green_table_exists %}\r\n      {% set old_table = blue_table %}\r\n      {% set target_table = green_table %}\r\n    {% else %}\r\n      {% set old_table = green_table %}\r\n      {% set target_table = blue_table %}\r\n    {% endif %}\r\n    {% else %}\r\n    {% set definition = dremio_get_view_definition(view) %}\r\n      {% if blue_table.render() in definition %}\r\n      {% set old_table = blue_table %}\r\n      {% set target_table = green_table %}\r\n    {% else %}\r\n      {% set old_table = green_table %}\r\n      {% set target_table = blue_table %}\r\n    {% endif %}\r\n  {% endif %}\r\n  {{ return([old_table, target_table]) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio_get_view_definition": {"unique_id": "macro.dbt_dremio.dremio_get_view_definition", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/helpers.sql", "original_file_path": "macros/helpers.sql", "name": "dremio_get_view_definition", "macro_sql": "{% macro dremio_get_view_definition(relation) %}\r\n  {% call statement('get_view_definition', fetch_result=True) -%}\r\n    with t(table_catalog, table_name, table_schema, view_definition) as (\r\n    select lower(case when position('.' in table_schema) > 0\r\n            then substring(table_schema, 1, position('.' in table_schema) - 1)\r\n            else table_schema\r\n        end)\r\n        ,lower(table_name)\r\n        ,lower(case when position('.' in table_schema) > 0\r\n            then substring(table_schema, position('.' in table_schema) + 1)\r\n            else 'no_schema'\r\n        end)\r\n        ,view_definition\r\n    from information_schema.views\r\n    )\r\n\r\n    select view_definition\r\n    from t\r\n    where ilike(table_catalog, '{{ relation.database.strip('\"') }}')\r\n      and ilike(table_schema, '{{ relation.schema.strip('\"') }}')\r\n      and ilike(table_name, '{{ relation.identifier.strip('\"') }}')\r\n  {% endcall %}\r\n  {% set result = load_result('get_view_definition').table %}\r\n  {{ return(result.rows[0].view_definition if result.rows | count > 0 else none ) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.generate_database_name": {"unique_id": "macro.dbt_dremio.generate_database_name", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/get_custom_database.sql", "original_file_path": "macros/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\r\n    {%- set default_database = target.database -%}\r\n    {%- if target.name == 'managed' %}\r\n      {%- if custom_database_name is not none -%}\r\n        {{ custom_database_name | trim }}\r\n      {%- elif default_database is not none -%}\r\n        {{ default_database }}\r\n      {%- else -%}\r\n        {{ target.environment }}\r\n      {%- endif -%}\r\n    {%- else -%}\r\n      {%- if default_database is not none %}\r\n        {{ default_database }}\r\n      {% else %}\r\n        {{ get_user_database() }}\r\n      {%- endif -%}\r\n    {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.generate_schema_name": {"unique_id": "macro.dbt_dremio.generate_schema_name", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if target.name == 'managed' and custom_schema_name is not none -%}\r\n      {{ custom_schema_name | trim }}\r\n    {%- else -%}\r\n      {{ default_schema }}\r\n    {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.drop_recursive_orphaned_tables": {"unique_id": "macro.dbt_dremio.drop_recursive_orphaned_tables", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/drop_orphaned_tables.sql", "original_file_path": "macros/drop_orphaned_tables.sql", "name": "drop_recursive_orphaned_tables", "macro_sql": "{%- macro drop_recursive_orphaned_tables(materialization_database='$scratch', materialization_schema='dbt') -%}\r\n  {%- set path = ([materialization_database] + ([materialization_schema] if materialization_schema != 'no_schema' else [])) | join('.')  -%}\r\n  {% call statement('list_orphan_tables', fetch_result=True) %}\r\n    select\r\n        lower(case when position('.' in table_schema) > 0\r\n                then substring(table_schema, 1, position('.' in table_schema) - 1)\r\n                else table_schema\r\n            end) as table_catalog\r\n        ,lower(case when position('.' in table_schema) > 0\r\n                then substring(table_schema, position('.' in table_schema) + 1)\r\n                else 'no_schema'\r\n            end) as table_schema\r\n        ,lower(table_name) as table_name\r\n    from information_schema.\"tables\" as t\r\n    where table_type = 'TABLE'\r\n    and table_schema like concat('{{ path }}', '.%')\r\n    and not exists (\r\n        select 1\r\n        from information_schema.\"views\" as v\r\n        where v.table_schema = substr(t.table_schema, length('{{ path }}') + 2)\r\n        and v.table_name = t.table_name\r\n    )\r\n  {%- endcall -%}\r\n  {%- set table = load_result('list_orphan_tables').table -%}\r\n  {%- for row in table.rows -%}\r\n    {% set relation = api.Relation.create(database=row[0], schema=row[1], identifier=row[2], type='table') %}\r\n    {{ log(relation, info=True) }}\r\n    {{ adapter.drop_relation(relation) }}\r\n  {%- endfor -%}\r\n\r\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__create_csv_table": {"unique_id": "macro.dbt_dremio.dremio__create_csv_table", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "dremio__create_csv_table", "macro_sql": "{% macro dremio__create_csv_table(model, agate_table) %}\r\n  {{ exceptions.raise_not_implemented(\r\n    'create_csv_table macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__reset_csv_table": {"unique_id": "macro.dbt_dremio.dremio__reset_csv_table", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "dremio__reset_csv_table", "macro_sql": "{% macro dremio__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\r\n  {{ exceptions.raise_not_implemented(\r\n    'reset_csv_table macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio__load_csv_rows": {"unique_id": "macro.dbt_dremio.dremio__load_csv_rows", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "dremio__load_csv_rows", "macro_sql": "{% macro dremio__load_csv_rows(model, agate_table) %}\r\n  {{ exceptions.raise_not_implemented(\r\n    'load_csv_rows macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio_select_csv_rows": {"unique_id": "macro.dbt_dremio.dremio_select_csv_rows", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "dremio_select_csv_rows", "macro_sql": "{% macro dremio_select_csv_rows(model, agate_table) %}\r\n{%- set column_override = model['config'].get('column_types', {}) -%}\r\n{%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\r\n{%- set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) -%}\r\n  select\r\n    {% for col_name in agate_table.column_names -%}\r\n      {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\r\n      {%- set type = column_override.get(col_name, inferred_type) -%}\r\n      {%- set column_name = (col_name | string) -%}\r\n      cast({{ adapter.quote_seed_column(column_name, quote_seed_column) }} as {{ type }})\r\n        as {{ adapter.quote_seed_column(column_name, quote_seed_column) }}{%- if not loop.last -%}, {%- endif -%}\r\n    {% endfor %}\r\n  from\r\n    (values\r\n      {% for row in agate_table.rows %}\r\n        ({%- for value in row -%}\r\n          {% if value is not none %}\r\n            {{ \"'\" ~ (value | string | replace(\"'\", \"''\")) ~ \"'\" }}\r\n          {% else %}\r\n            cast(null as varchar)\r\n          {% endif %}\r\n          {%- if not loop.last%},{%- endif %}\r\n        {%- endfor -%})\r\n        {%- if not loop.last%},{%- endif %}\r\n      {% endfor %}) temp_table ( {{ cols_sql }} )\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.materialization_seed_dremio": {"unique_id": "macro.dbt_dremio.materialization_seed_dremio", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_dremio", "macro_sql": "{% materialization seed, adapter='dremio' %}\r\n  {%- set materialization_database = config.get('materialization_database', default='$scratch') %}\r\n  {%- set materialization_schema = config.get('materialization_schema', default='dbt') %}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set full_refresh_mode = True -%}\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {% set target_relation = this.incorporate(type='view') %}\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n    {%- set agate_table = load_agate_table() -%}\r\n  {%- do store_result('agate_table', status='OK', agate_table=agate_table) -%}\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n  {% if exists_as_table %}\r\n    {{ exceptions.raise_compiler_error(\"Cannot create virtual dataset '{}', there is already a physical dataset named the same\".format(old_relation)) }}\r\n  {% endif %}\r\n  {% set num_rows = (agate_table.rows | length) %}\r\n  {% set sql = dremio_select_csv_rows(model, agate_table) %}\r\n  {% set old_table, target_table = dremio_get_old_and_target_tables(target_relation, materialization_database, materialization_schema) %}\r\n  {{ drop_relation_if_exists(target_table) }}\r\n  {% call statement('main') %}\r\n    {{ create_table_as(False, target_table, sql) }}\r\n  {% endcall %}\r\n  {% call statement('create view') %}\r\n    {{ create_view_as(target_relation, 'select * from ' ~ target_table) }}\r\n  {% endcall %}\r\n  {{ drop_relation_if_exists(old_table) }}\r\n  {% do persist_docs(target_relation, model) %}\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.dremio_create_or_replace_view": {"unique_id": "macro.dbt_dremio.dremio_create_or_replace_view", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "dremio_create_or_replace_view", "macro_sql": "{% macro dremio_create_or_replace_view(run_outside_transaction_hooks=True) %}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n  {%- set target_relation = api.Relation.create(\r\n      identifier=identifier, schema=schema, database=database,\r\n      type='view') -%}\r\n  {% if run_outside_transaction_hooks %}\r\n      -- no transactions on BigQuery\r\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  {% endif %}\r\n  -- `BEGIN` happens here on Snowflake\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n  {%- if old_relation is not none and old_relation.is_table -%}\r\n    {{ handle_existing_table(flags.FULL_REFRESH, old_relation) }}\r\n  {%- endif -%}\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_view_as(target_relation, sql) }}\r\n  {%- endcall %}\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n  {{ adapter.commit() }}\r\n  {% if run_outside_transaction_hooks %}\r\n      -- No transactions on BigQuery\r\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {% endif %}\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.materialization_view_dremio": {"unique_id": "macro.dbt_dremio.materialization_view_dremio", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_dremio", "macro_sql": "{% materialization view, adapter='dremio' -%}\r\n    {{ return(dremio_create_or_replace_view()) }}\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.materialization_table_dremio": {"unique_id": "macro.dbt_dremio.materialization_table_dremio", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_dremio", "macro_sql": "{% materialization table, adapter='dremio' %}\r\n  {%- set materialization_database = config.get('materialization_database', default='$scratch') %}\r\n  {%- set materialization_schema = config.get('materialization_schema', default='dbt') %}\r\n  {% set partition = config.get('partition') %}\r\n  {% set sort = config.get('sort') %}\r\n  {% set distribute = config.get('distribute') %}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set full_refresh_mode = True -%}\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = this.incorporate(type='view') %}\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n  {% if exists_as_table %}\r\n    {{ exceptions.raise_compiler_error(\"Cannot create virtual dataset '{}', there is already a physical dataset named the same\".format(old_relation)) }}\r\n  {% endif %}\r\n  {% set old_table, target_table = dremio_get_old_and_target_tables(target_relation, materialization_database, materialization_schema) %}\r\n  {{ drop_relation_if_exists(target_table) }}\r\n  {% call statement('main') %}\r\n    {{ dremio_create_table_as(target_table, sql, partition=partition, distribute=distribute, sort=sort) }}\r\n  {% endcall %}\r\n  {% call statement('create view') %}\r\n    {{ create_view_as(target_relation, 'select * from ' ~ target_table) }}\r\n  {% endcall %}\r\n  {{ drop_relation_if_exists(old_table) }}\r\n  {% do persist_docs(target_relation, model) %}\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.materialization_file_dremio": {"unique_id": "macro.dbt_dremio.materialization_file_dremio", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/file/file.sql", "original_file_path": "macros/materializations/file/file.sql", "name": "materialization_file_dremio", "macro_sql": "{% materialization file, adapter='dremio' %}\r\n  {%- set type = config.get('type', default='parquet') %}\r\n  -- can be : parquet, json, text, arrow\r\n  {%- set with_single_writer = config.get('with_single_writer', default=false) %}\r\n  {%- set output_extension = config.get('output_extension') %}\r\n  {%- set line_delimiter = config.get('line_delimiter', default='\\n') %}\r\n  {%- set field_delimiter = config.get('field_delimiter', default='\\u0000') %}\r\n  {%- set quote = config.get('quote', default='\"') %}\r\n  {%- set escape = config.get('escape', default='\"') %}\r\n  {%- set pretty_print = config.get('pretty_print', default=true) %}\r\n  {%- set store_as -%}\r\n    type => '{{ type }}'\r\n    {%- if output_extension is not none -%}\r\n    , outputExtension => '{{ output_extension }}'\r\n    {%- endif -%}\r\n    {%- if type == 'json' -%}\r\n    , prettyPrint => {{ pretty_print }}\r\n    {%- elif type == 'text'-%}\r\n    , lineDelimiter => '{{ line_delimiter }}', fieldDelimiter => '{{ field_delimiter }}', quote => '{{ quote }}', escape => '{{ escape }}'\r\n    {%- endif -%}\r\n  {%- endset -%}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = this.incorporate(type='table') %} -%}\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n    -- cleanup\r\n  {{ drop_relation_if_exists(old_relation) }}\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ dremio_create_file_as(False, target_relation, sql,\r\n      partition=partition, distribute=distribute, sort=sort, type=type, \r\n      output_extension=output_extension, line_delimiter=line_delimiter,\r\n      field_delimiter=field_delimiter, quote=quote, escape=escape,\r\n      pretty_print=pretty_print, with_single_writer=with_single_writer) }}\r\n  {%- endcall %}\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.materialization_incremental_dremio": {"unique_id": "macro.dbt_dremio.materialization_incremental_dremio", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_dremio", "macro_sql": "{% materialization incremental, adapter='dremio' %}\r\n{%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\r\n{% set unique_key = config.get('unique_key') %}\r\n{%- set materialization_database = config.get('materialization_database', default='$scratch') %}\r\n{%- set materialization_schema = config.get('materialization_schema', default='dbt') %}\r\n{% set partition = config.get('partition') %}\r\n{% set sort = config.get('sort') %}\r\n{%- set identifier = model['alias'] -%}\r\n{%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n{% set full_refresh = full_refresh_mode or old_relation is none %}\r\n{%- set target_relation = this.incorporate(type='view') %}\r\n{%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n{%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n{{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n-- `BEGIN` happens here:\r\n{{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n{% if exists_as_table %}\r\n  {{ exceptions.raise_compiler_error(\"Cannot create virtual dataset '{}', there is already a physical dataset named the same\".format(old_relation)) }}\r\n{% endif %}\r\n{% set old_table, target_table = dremio_get_old_and_target_tables(target_relation, materialization_database, materialization_schema) %}\r\n{{ log(old_table, info=false) }}\r\n{{ log(target_table, info=false) }}\r\n{% set tmp_table = api.Relation.create(database=target_table.database, schema=target_table.schema, identifier=(identifier ~ '_tmp'), type='table') %}\r\n{{ log(tmp_table, info=false) }}\r\n{% if full_refresh %}\r\n  {% set build_sql = sql %}\r\n{% else %}\r\n  {% set build_sql %}\r\n    select *\r\n    from {{ old_table }}\r\n    {%- if unique_key is not none %}\r\n    where {{ unique_key }} not in (\r\n      select {{ unique_key }}\r\n      from {{ tmp_table }}\r\n    )\r\n    union all\r\n    select *\r\n    from {{ tmp_table }}\r\n    {% endif %}\r\n  {% endset %}\r\n{% endif %}\r\n{% set results = run_query(sql ~ ' limit 1') %}\r\n{{ log(\"has_results:\" ~ (results.rows | length), info=false) }}\r\n{% if full_refresh or results.rows | length > 0 %}\r\n  {{ drop_relation_if_exists(target_table) }}\r\n  {{ log(\"drop target table \" ~ target_table, info=false) }}\r\n  {% if not full_refresh %}\r\n    {{ drop_relation_if_exists(tmp_table) }}\r\n    {{ log(\"drop temporary table \" ~ tmp_table, info=false) }}\r\n    {% call statement('create temp table') %}\r\n      {{ dremio_create_table_as(tmp_table, sql, partition, sort) }}\r\n    {% endcall %}\r\n    {{ log(\"create temporary table \" ~ tmp_table, info=false) }}\r\n  {% endif %}\r\n  {% call statement('main') %}\r\n    {{ dremio_create_table_as(target_table, build_sql, partition, sort) }}\r\n  {% endcall %}\r\n  {{ log(\"create table \" ~ target_table, info=false) }}\r\n  {% if not full_refresh %}\r\n    {{ drop_relation_if_exists(tmp_table) }}\r\n    {{ log(\"drop temporary table \" ~ tmp_table, info=false) }}\r\n  {% endif %}\r\n  {% call statement('create view') %}\r\n    {{ create_view_as(target_relation, 'select * from ' ~ target_table) }}\r\n  {% endcall %}\r\n  {{ log(\"create view on \" ~ target_table, info=false) }}\r\n  {{ drop_relation_if_exists(old_table) }}\r\n  {{ log(\"drop old table \" ~ old_table, info=false) }}\r\n{% else %}\r\n  {% call noop_statement('main', 'NOOP') %}\r\n    select 1\r\n  {% endcall %}\r\n{% endif %}\r\n{% do persist_docs(target_relation, model) %}\r\n{{ run_hooks(post_hooks, inside_transaction=True) }}\r\n-- `COMMIT` happens here\r\n{{ adapter.commit() }}\r\n{{ run_hooks(post_hooks, inside_transaction=False) }}\r\n{{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.create_raw_reflection": {"unique_id": "macro.dbt_dremio.create_raw_reflection", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/raw_reflection/raw_reflection.sql", "original_file_path": "macros/materializations/raw_reflection/raw_reflection.sql", "name": "create_raw_reflection", "macro_sql": "{% macro create_raw_reflection(dataset, reflection, display, sort=None, partition=None, distribute=None) %}\r\n  alter dataset {{ dataset }}\r\n    create raw reflection {{ reflection.include(database=False, schema=False) }}\r\n      using display( {{ display | map('tojson') | join(', ') }} )\r\n      {% if partition is not none %}\r\n        partition by ( {{ partition | map('tojson') | join(', ') }} )\r\n      {% endif %}\r\n      {% if sort is not none %}\r\n        localsort by ( {{ sort | map('tojson') | join(', ') }} )\r\n      {% endif %}\r\n      {% if distribute is not none %}\r\n        distribute by ( {{ distribute | map('tojson') | join(', ') }} )\r\n      {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.materialization_raw_reflection_dremio": {"unique_id": "macro.dbt_dremio.materialization_raw_reflection_dremio", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/raw_reflection/raw_reflection.sql", "original_file_path": "macros/materializations/raw_reflection/raw_reflection.sql", "name": "materialization_raw_reflection_dremio", "macro_sql": "{% materialization raw_reflection, adapter='dremio' %}\r\n  {% set dataset = config.require('dataset') %}\r\n  {% set display = config.get('display') %}\r\n  {% set partition = config.get('partition') %}\r\n  {% set sort = config.get('sort') %}\r\n  {% set distribute = config.get('distribute') %}\r\n  {% set dataset = ref(dataset) %}\r\n  {% set identifier = model['alias'] %}\r\n  {%- set old_relation = adapter.get_relation(database=dataset.database, schema=dataset.schema, identifier=identifier) -%}\r\n  {%- set target_relation = this.incorporate(database=dataset.database, schema=dataset.schema, type='materializedview') %}\r\n  {% if display is none %}\r\n    {% set display = adapter.get_columns_in_relation(dataset) | map(attribute='name') | list %}\r\n  {% endif %}\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n    -- cleanup\r\n  {{ drop_reflection_if_exists(dataset, old_relation) }}\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_raw_reflection(dataset, target_relation, display, sort, partition, distribute) }}\r\n  {%- endcall %}\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.create_aggregation_reflection": {"unique_id": "macro.dbt_dremio.create_aggregation_reflection", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/aggregation_reflection/aggregation_reflection.sql", "original_file_path": "macros/materializations/aggregation_reflection/aggregation_reflection.sql", "name": "create_aggregation_reflection", "macro_sql": "{% macro create_aggregation_reflection(dataset, reflection, dimensions, measures, sort=None, partition=None, distribute=None) %}\r\n  alter dataset {{ dataset }}\r\n    create aggregate reflection {{ reflection.include(database=False, schema=False) }}\r\n      using dimensions( {{ dimensions | map('tojson') | join(', ') }} )\r\n      measures( {{ measures | map('tojson') | join(', ') }} )\r\n      {% if partition is not none %}\r\n        partition by ( {{ partition | map('tojson') | join(', ') }} )\r\n      {% endif %}\r\n      {% if sort is not none %}\r\n        localsort by ( {{ sort | map('tojson') | join(', ') }} )\r\n      {% endif %}\r\n      {% if distribute is not none %}\r\n        distribute by ( {{ distribute | map('tojson') | join(', ') }} )\r\n      {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_dremio.materialization_aggregation_reflection_dremio": {"unique_id": "macro.dbt_dremio.materialization_aggregation_reflection_dremio", "package_name": "dbt_dremio", "root_path": "/root/dev/git/dbt-dremio/dbt/include/dremio", "path": "macros/materializations/aggregation_reflection/aggregation_reflection.sql", "original_file_path": "macros/materializations/aggregation_reflection/aggregation_reflection.sql", "name": "materialization_aggregation_reflection_dremio", "macro_sql": "{% materialization aggregation_reflection, adapter='dremio' %}\r\n  {% set dataset = config.require('dataset') %}\r\n  {% set dimensions = config.get('dimensions') %}\r\n  {% set measures = config.get('measures') %}\r\n  {% set partition = config.get('partition') %}\r\n  {% set sort = config.get('sort') %}\r\n  {% set distribute = config.get('distribute') %}\r\n  {% set dataset = ref(dataset) %}\r\n  {% set identifier = model['alias'] %}\r\n  {%- set old_relation = adapter.get_relation(database=dataset.database, schema=dataset.schema, identifier=identifier) -%}\r\n  {%- set target_relation = this.incorporate(database=dataset.database, schema=dataset.schema, type='materializedview') %}\r\n  {% set columns = adapter.get_columns_in_relation(dataset) %}\r\n  {% if dimensions is none %}\r\n    {% set dimensions = columns | rejectattr('dtype', 'in', ['decimal', 'float', 'double']) | map(attribute='name') | list %}\r\n  {% endif %}\r\n  {% if measures is none %}\r\n    {% set measures = columns | selectattr('dtype', 'in', ['decimal', 'float', 'double']) | map(attribute='name') | list %}\r\n  {% endif %}\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n    -- cleanup\r\n  {{ drop_reflection_if_exists(dataset, old_relation) }}\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_aggregation_reflection(dataset, target_relation, dimensions, measures, sort, partition, distribute) }}\r\n  {%- endcall %}\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set status, res = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, status=status, agate_table=res) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, status=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_result(name, status=status, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', status='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    select * from insertions\n    union all\n    select * from updates\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['injected_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.6/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {"exposure.subsurface.transfer_of_ownership": {"fqn": ["subsurface", "marts", "transfer_of_ownership"], "unique_id": "exposure.subsurface.transfer_of_ownership", "package_name": "subsurface", "root_path": "/root/git/subsurface", "path": "marts/exposures.yml", "original_file_path": "models/marts/exposures.yml", "name": "transfer_of_ownership", "type": "dashboard", "owner": {"email": "ringoandpaul@aharddaysnight.fr", "name": "Ringo and Paul"}, "resource_type": "exposure", "maturity": "low", "url": "https://bi.tool/dashboards/1", "description": "Land value at transaction time in France since 2015", "depends_on": {"macros": [], "nodes": ["model.subsurface.f_land_values", "model.subsurface.d_crop_types", "model.subsurface.d_premises_types", "model.subsurface.d_municipalities"]}, "refs": [["f_land_values"], ["d_crop_types"], ["d_premises_types"], ["d_municipalities"]], "sources": []}}, "disabled": [], "generated_at": "2021-01-28T16:04:39.979626Z", "parent_map": {"model.subsurface.d_crop_types": ["seed.subsurface.crop_types"], "model.subsurface.d_municipalities": ["model.subsurface.stg__municipalities"], "model.subsurface.d_premises_types": ["seed.subsurface.premises_types"], "model.subsurface.f_land_values": ["model.subsurface.stg__land_values", "seed.subsurface.transfer_types"], "model.subsurface.stg__land_values": ["source.subsurface.land_values.valeurs_foncieres"], "model.subsurface.stg__municipalities": ["source.subsurface.geo.communes"], "analysis.subsurface.most_expensive_departments_for_flats": ["model.subsurface.d_municipalities", "model.subsurface.f_land_values"], "analysis.subsurface.transactions_seasonality": ["model.subsurface.f_land_values"], "test.subsurface.stg__land_values_built_surface_implies_premises_code": ["model.subsurface.stg__land_values"], "test.subsurface.stg__land_values_land_surface_implies_crop_code": ["model.subsurface.stg__land_values"], "seed.subsurface.crop_types": [], "seed.subsurface.premises_types": [], "seed.subsurface.transfer_types": [], "test.subsurface.not_null_f_land_values_transaction_date": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_transaction_amount": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_transfer_label": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_lane_type": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_lane_code": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_lane": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_zip_code": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_municipality_code": ["model.subsurface.f_land_values"], "test.subsurface.relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_": ["model.subsurface.d_municipalities", "model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_lots_count": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_premises_code": ["model.subsurface.f_land_values"], "test.subsurface.relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_": ["model.subsurface.d_premises_types", "model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_built_surface": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_land_surface": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_main_rooms_count": ["model.subsurface.f_land_values"], "test.subsurface.not_null_f_land_values_crop_code": ["model.subsurface.f_land_values"], "test.subsurface.relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_": ["model.subsurface.d_crop_types", "model.subsurface.f_land_values"], "test.subsurface.not_null_d_crop_types_crop_code": ["model.subsurface.d_crop_types"], "test.subsurface.unique_d_crop_types_crop_code": ["model.subsurface.d_crop_types"], "test.subsurface.not_null_d_premises_types_premises_code": ["model.subsurface.d_premises_types"], "test.subsurface.unique_d_premises_types_premises_code": ["model.subsurface.d_premises_types"], "test.subsurface.not_null_d_municipalities_municipality_code": ["model.subsurface.d_municipalities"], "test.subsurface.unique_d_municipalities_municipality_code": ["model.subsurface.d_municipalities"], "test.subsurface.not_null_stg__land_values_transaction_date": ["model.subsurface.stg__land_values"], "test.subsurface.not_null_stg__land_values_transfer_label_fr": ["model.subsurface.stg__land_values"], "test.subsurface.relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_": ["model.subsurface.stg__land_values", "seed.subsurface.transfer_types"], "test.subsurface.not_null_stg__land_values_municipality_code": ["model.subsurface.stg__land_values"], "test.subsurface.not_null_stg__land_values_lots_count": ["model.subsurface.stg__land_values"], "test.subsurface.not_null_stg__municipalities_municipality_code": ["model.subsurface.stg__municipalities"], "test.subsurface.unique_stg__municipalities_municipality_code": ["model.subsurface.stg__municipalities"], "test.subsurface.not_null_stg__municipalities_municipality_label": ["model.subsurface.stg__municipalities"], "test.subsurface.not_null_stg__municipalities_department_code": ["model.subsurface.stg__municipalities"], "test.subsurface.not_null_stg__municipalities_department_label": ["model.subsurface.stg__municipalities"], "test.subsurface.not_null_stg__municipalities_region_code": ["model.subsurface.stg__municipalities"], "test.subsurface.not_null_stg__municipalities_region_label": ["model.subsurface.stg__municipalities"], "test.subsurface.not_null_crop_types_crop_code": ["seed.subsurface.crop_types"], "test.subsurface.unique_crop_types_crop_code": ["seed.subsurface.crop_types"], "test.subsurface.not_null_crop_types_crop_label": ["seed.subsurface.crop_types"], "test.subsurface.not_null_premises_types_premises_code": ["seed.subsurface.premises_types"], "test.subsurface.unique_premises_types_premises_code": ["seed.subsurface.premises_types"], "test.subsurface.not_null_premises_types_premises_label_fr": ["seed.subsurface.premises_types"], "test.subsurface.not_null_premises_types_premises_label_en": ["seed.subsurface.premises_types"], "test.subsurface.not_null_transfer_types_transfer_label_fr": ["seed.subsurface.transfer_types"], "test.subsurface.unique_transfer_types_transfer_label_fr": ["seed.subsurface.transfer_types"], "test.subsurface.not_null_transfer_types_transfer_label_en": ["seed.subsurface.transfer_types"], "test.subsurface.unique_transfer_types_transfer_label_en": ["seed.subsurface.transfer_types"], "source.subsurface.land_values.valeurs_foncieres": [], "source.subsurface.geo.communes": [], "exposure.subsurface.transfer_of_ownership": ["model.subsurface.d_crop_types", "model.subsurface.d_municipalities", "model.subsurface.d_premises_types", "model.subsurface.f_land_values"]}, "child_map": {"model.subsurface.d_crop_types": ["exposure.subsurface.transfer_of_ownership", "test.subsurface.not_null_d_crop_types_crop_code", "test.subsurface.relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_", "test.subsurface.unique_d_crop_types_crop_code"], "model.subsurface.d_municipalities": ["analysis.subsurface.most_expensive_departments_for_flats", "exposure.subsurface.transfer_of_ownership", "test.subsurface.not_null_d_municipalities_municipality_code", "test.subsurface.relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_", "test.subsurface.unique_d_municipalities_municipality_code"], "model.subsurface.d_premises_types": ["exposure.subsurface.transfer_of_ownership", "test.subsurface.not_null_d_premises_types_premises_code", "test.subsurface.relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_", "test.subsurface.unique_d_premises_types_premises_code"], "model.subsurface.f_land_values": ["analysis.subsurface.most_expensive_departments_for_flats", "analysis.subsurface.transactions_seasonality", "exposure.subsurface.transfer_of_ownership", "test.subsurface.not_null_f_land_values_built_surface", "test.subsurface.not_null_f_land_values_crop_code", "test.subsurface.not_null_f_land_values_land_surface", "test.subsurface.not_null_f_land_values_lane", "test.subsurface.not_null_f_land_values_lane_code", "test.subsurface.not_null_f_land_values_lane_type", "test.subsurface.not_null_f_land_values_lots_count", "test.subsurface.not_null_f_land_values_main_rooms_count", "test.subsurface.not_null_f_land_values_municipality_code", "test.subsurface.not_null_f_land_values_premises_code", "test.subsurface.not_null_f_land_values_transaction_amount", "test.subsurface.not_null_f_land_values_transaction_date", "test.subsurface.not_null_f_land_values_transfer_label", "test.subsurface.not_null_f_land_values_zip_code", "test.subsurface.relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_", "test.subsurface.relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_", "test.subsurface.relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_"], "model.subsurface.stg__land_values": ["model.subsurface.f_land_values", "test.subsurface.not_null_stg__land_values_lots_count", "test.subsurface.not_null_stg__land_values_municipality_code", "test.subsurface.not_null_stg__land_values_transaction_date", "test.subsurface.not_null_stg__land_values_transfer_label_fr", "test.subsurface.relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_", "test.subsurface.stg__land_values_built_surface_implies_premises_code", "test.subsurface.stg__land_values_land_surface_implies_crop_code"], "model.subsurface.stg__municipalities": ["model.subsurface.d_municipalities", "test.subsurface.not_null_stg__municipalities_department_code", "test.subsurface.not_null_stg__municipalities_department_label", "test.subsurface.not_null_stg__municipalities_municipality_code", "test.subsurface.not_null_stg__municipalities_municipality_label", "test.subsurface.not_null_stg__municipalities_region_code", "test.subsurface.not_null_stg__municipalities_region_label", "test.subsurface.unique_stg__municipalities_municipality_code"], "analysis.subsurface.most_expensive_departments_for_flats": [], "analysis.subsurface.transactions_seasonality": [], "test.subsurface.stg__land_values_built_surface_implies_premises_code": [], "test.subsurface.stg__land_values_land_surface_implies_crop_code": [], "seed.subsurface.crop_types": ["model.subsurface.d_crop_types", "test.subsurface.not_null_crop_types_crop_code", "test.subsurface.not_null_crop_types_crop_label", "test.subsurface.unique_crop_types_crop_code"], "seed.subsurface.premises_types": ["model.subsurface.d_premises_types", "test.subsurface.not_null_premises_types_premises_code", "test.subsurface.not_null_premises_types_premises_label_en", "test.subsurface.not_null_premises_types_premises_label_fr", "test.subsurface.unique_premises_types_premises_code"], "seed.subsurface.transfer_types": ["model.subsurface.f_land_values", "test.subsurface.not_null_transfer_types_transfer_label_en", "test.subsurface.not_null_transfer_types_transfer_label_fr", "test.subsurface.relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_", "test.subsurface.unique_transfer_types_transfer_label_en", "test.subsurface.unique_transfer_types_transfer_label_fr"], "test.subsurface.not_null_f_land_values_transaction_date": [], "test.subsurface.not_null_f_land_values_transaction_amount": [], "test.subsurface.not_null_f_land_values_transfer_label": [], "test.subsurface.not_null_f_land_values_lane_type": [], "test.subsurface.not_null_f_land_values_lane_code": [], "test.subsurface.not_null_f_land_values_lane": [], "test.subsurface.not_null_f_land_values_zip_code": [], "test.subsurface.not_null_f_land_values_municipality_code": [], "test.subsurface.relationships_f_land_values_municipality_code__municipality_code__ref_d_municipalities_": [], "test.subsurface.not_null_f_land_values_lots_count": [], "test.subsurface.not_null_f_land_values_premises_code": [], "test.subsurface.relationships_f_land_values_premises_code__premises_code__ref_d_premises_types_": [], "test.subsurface.not_null_f_land_values_built_surface": [], "test.subsurface.not_null_f_land_values_land_surface": [], "test.subsurface.not_null_f_land_values_main_rooms_count": [], "test.subsurface.not_null_f_land_values_crop_code": [], "test.subsurface.relationships_f_land_values_crop_code__crop_code__ref_d_crop_types_": [], "test.subsurface.not_null_d_crop_types_crop_code": [], "test.subsurface.unique_d_crop_types_crop_code": [], "test.subsurface.not_null_d_premises_types_premises_code": [], "test.subsurface.unique_d_premises_types_premises_code": [], "test.subsurface.not_null_d_municipalities_municipality_code": [], "test.subsurface.unique_d_municipalities_municipality_code": [], "test.subsurface.not_null_stg__land_values_transaction_date": [], "test.subsurface.not_null_stg__land_values_transfer_label_fr": [], "test.subsurface.relationships_stg__land_values_transfer_label_fr__transfer_label_fr__ref_transfer_types_": [], "test.subsurface.not_null_stg__land_values_municipality_code": [], "test.subsurface.not_null_stg__land_values_lots_count": [], "test.subsurface.not_null_stg__municipalities_municipality_code": [], "test.subsurface.unique_stg__municipalities_municipality_code": [], "test.subsurface.not_null_stg__municipalities_municipality_label": [], "test.subsurface.not_null_stg__municipalities_department_code": [], "test.subsurface.not_null_stg__municipalities_department_label": [], "test.subsurface.not_null_stg__municipalities_region_code": [], "test.subsurface.not_null_stg__municipalities_region_label": [], "test.subsurface.not_null_crop_types_crop_code": [], "test.subsurface.unique_crop_types_crop_code": [], "test.subsurface.not_null_crop_types_crop_label": [], "test.subsurface.not_null_premises_types_premises_code": [], "test.subsurface.unique_premises_types_premises_code": [], "test.subsurface.not_null_premises_types_premises_label_fr": [], "test.subsurface.not_null_premises_types_premises_label_en": [], "test.subsurface.not_null_transfer_types_transfer_label_fr": [], "test.subsurface.unique_transfer_types_transfer_label_fr": [], "test.subsurface.not_null_transfer_types_transfer_label_en": [], "test.subsurface.unique_transfer_types_transfer_label_en": [], "source.subsurface.land_values.valeurs_foncieres": ["model.subsurface.stg__land_values"], "source.subsurface.geo.communes": ["model.subsurface.stg__municipalities"], "exposure.subsurface.transfer_of_ownership": []}, "metadata": {"project_id": "6a043b8e6e9c09dcd039784abd4406f2", "user_id": "96699e74-d5fb-4041-94e4-199d954e6af8", "send_anonymous_usage_stats": true, "adapter_type": "dremio"}}